apply {
    plugin 'java'
    plugin 'groovy'
    plugin 'eclipse'
}

repositories { mavenCentral() }

dependencies {
    testCompile 'junit:junit:4.+', 'org.apache.ant:ant:1.8.2'
    testRuntime 'junit:junit:4.+', 'org.apache.ant:ant:1.8.2'
    compile 'org.apache.ant:ant-javamail:1.8.2', 'javax.mail:mail:1.4', 'javax.activation:activation:1.1.1', fileTree(dir: 'libs', include: '*.jar')
    runtime 'org.apache.ant:ant-javamail:1.8.2', 'javax.mail:mail:1.4', 'javax.activation:activation:1.1.1', fileTree(dir: 'libs', include: '*.jar')
    groovy localGroovy()
}

task ask(group: 'Apphance Flow documentation', description: 'Asks for user/password in case not specified as username/password properties') << {
    def console = System.console()
    if (console) {
        if (!project.hasProperty('username')) {
            project.ext['username'] = console.readLine('> Please enter your username: ')
        }
        if (!project.hasProperty('password')) {
            project.ext['password'] = new String(console.readPassword('> Please enter your password: '))
        }
    } else {
        logger.error "Cannot get console."
    }
}

Properties props = new Properties()
props.load(file('../gradle.properties').newInputStream())
def version = properties.get('version')

task sendPluginReference(group: 'Apphance Flow documentation', description: 'Send plugin reference to Apphance Flow\'s sites') << {
    javaexec {
        workingDir = getRootDir()
        main = 'com.apphance.flow.documentation.sites.FlowPluginReferenceSender'
        classpath = sourceSets.main.runtimeClasspath
        args project['username'], project['password'], file('../tmp/plugins_reference.html')
    }
}
project.sendPluginReference.dependsOn(project.classes, project.ask)

task downloadPages(group: 'Apphance Flow documentation', description: 'Downloads all pages from Apphance Flow sites and prepares .zip file with the documentation') << {
    javaexec {
        workingDir = getRootDir()
        main = 'com.apphance.flow.documentation.sites.FlowSiteRetrieval'
        classpath = sourceSets.main.runtimeClasspath
        args project['username'], project['password'], file('tmp/documentation')
    }
    ant.zip(destfile: file("tmp/Apphance-Flow-doc-${version}.zip")) {
        zipfileset(dir: file('tmp/documentation'))
    }
}
project.downloadPages.dependsOn(project.classes, project.ask)

task sendZipDocumentation(group: 'Apphance Flow documentation', description: 'Sends .prepared zip file to Apphance Flow sites') << {
    javaexec {
        workingDir = getRootDir()
        main = 'com.apphance.flow.documentation.sites.FlowFileUploader'
        classpath = sourceSets.main.runtimeClasspath
        args project['username'], project['password'], file("tmp/Apphance-Flow-doc-${version}.zip")
    }
}
project.sendZipDocumentation.dependsOn(project.classes, project.ask)
