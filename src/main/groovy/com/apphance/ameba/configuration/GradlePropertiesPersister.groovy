package com.apphance.ameba.configuration

import com.apphance.ameba.util.SortedProperties
import com.apphance.ameba.configuration.properties.AbstractProperty
import com.google.common.io.Files
import com.google.inject.Inject
import org.gradle.api.Project

import java.text.SimpleDateFormat

import static com.google.common.io.Files.newWriter
import static java.io.File.separator
import static java.nio.charset.StandardCharsets.UTF_8
import static org.slf4j.LoggerFactory.getLogger

@com.google.inject.Singleton
class GradlePropertiesPersister implements PropertyPersister {

    def log = getLogger(this.class)

    private Properties props

    private File propertyFile

    @Inject
    GradlePropertiesPersister(Project project) {
        props = new SortedProperties()
        propertyFile = new File("${project.rootDir.absolutePath}${separator}gradle.properties")
        if (propertyFile.exists()) {
            log.info("File ${propertyFile.absolutePath} exist. Reading configuration")
            props.load(Files.newReader(propertyFile, UTF_8))
            log.info("Configuration: $props")
        } else {
            log.info("No property file. Expected: ${propertyFile.absolutePath}\nEmpty initial configuration")
        }
    }

    @Override
    def get(String key) {
        return props.getProperty(key)
    }

    @Override
    def save(Collection<AbstractConfiguration> configurations) {
        if (propertyFile.exists()) {
            def backupFile = propertyFile.absolutePath + timeStamp
            log.info("Making backup of old configuration: $backupFile")
            Files.copy(propertyFile, new File(backupFile))
            propertyFile.delete()
        }
        propertyFile.createNewFile()

        configurations.each { AbstractConfiguration conf ->

            props.setProperty(conf.enabledPropKey, conf.enabled.toString())

            conf.amebaProperties.each { AbstractProperty prop ->
                props.setProperty(prop.name, prop?.value?.toString() ?: '')
            }
        }

        props.store(newWriter(propertyFile, UTF_8), "Automatically generated by Ameba")
        log.info("New configuration written successfully")
    }

    static String getTimeStamp() {
        new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date())
    }
}
