apply {
    plugin 'java'
    plugin 'groovy'
    plugin 'maven'
    plugin 'signing'
    plugin 'eclipse'
}

apply from:'file:emma.gradle'
//apply from:'file:release.gradle'

group = 'com.apphance.ameba'
ext.artifactId = 'Ameba'

task sourcesJar(type: Jar, dependsOn:classes, description: 'Prepares .jar file containing the source code of ameba') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:groovydoc, description: 'Prepares .jar file with documentation generated out of the code') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

artifacts {
    if (isReleaseVersion) {
        archives sourcesJar
        archives javadocJar
        archives jar
    }
}

signing {
    if (isReleaseVersion) {
        sign configurations.archives
    }
}

def uploadUsername = ''
def uploadPassword = ''
if (project.hasProperty('sonatypeUsername')) {
    uploadUsername = project['sonatypeUsername']
}
if (project.hasProperty('sonatypePassword')) {
    uploadPassword = project['sonatypePassword']
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signPom(deployment) }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: uploadUsername, password: uploadPassword)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: uploadUsername, password: uploadPassword)
            }

            pom.artifactId = artifactId

            pom.project {
                name 'ameba'
                packaging 'jar'
                description 'AMEBA stands for Apphance MobilE Build Automation - it is gradle plugin to automate builds for mobile applications'
                url 'http://ameba.apphance.com/'

                scm {
                    url 'scm:git@github.com:apphance/Apphance-MobilE-Build-Automation.git'
                    connection 'scm:git@github.com:apphance/Apphance-MobilE-Build-Automation.git'
                    developerConnection 'scm:git@github.com:apphance/Apphance-MobilE-Build-Automation.git'
                }

                licenses {
                    license {
                        name 'NewBSD Licence'
                        url 'http://www.opensource.org/licenses/bsd-license.php'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'jarek.potiuk.apphance'
                        name 'Jarek Potiuk'
                    }
                    developer {
                        id 'blazej.marcinkiewicz'
                        name 'Blazej Marcinkiewicz'
                    }
                }
            }

        }
    }
}

configure(install.repositories.mavenInstaller) {
    pom.project { artifactId artifactId }
}

//compileGroovy.options.optimize = false
//compileGroovy.options.debug = true
//compileGroovy.options.debugOptions.debugLevel = 'lines,source,vars'

repositories { mavenCentral() }

configurations { mail }

emma{
    reportPath = "emma"
    verbosityLevel =  "verbose"
}

dependencies {
    emma 'emma:emma:2.0.5312', 'emma:emma_ant:2.1.5320'
    testCompile 'junit:junit:4.+', 'org.apache.ant:ant:1.8.2'
    testRuntime 'junit:junit:4.+', 'org.apache.ant:ant:1.8.2'
    mail 'org.apache.ant:ant-javamail:1.8.2',  'javax.mail:mail:1.4', 'javax.activation:activation:1.1.1'
    compile 'javax.mail:mail:1.4', gradleApi(), fileTree(dir: 'libs', include: '*.jar')
        runtime 'org.apache.ant:ant-javamail:1.8.2',  'javax.mail:mail:1.4', 'javax.activation:activation:1.1.1', fileTree(dir: 'libs', include: '*.jar')
    groovy localGroovy()
}

file('tmp').mkdirs()

ext.generatedFile = file('tmp/plugins_reference.html')

task (buildPluginReference, group: 'Ameba\'s documentation', dependsOn: ['testClasses','processTestResources'], type: JavaExec, description: 'Builds plugin description HTML file') {
    def outputFile = file('tmp/buildDocumentation.out')
    main = 'com.apphance.ameba.documentation.AmebaPluginReferenceBuilder'
    classpath = sourceSets.test.runtimeClasspath
    standardOutput = outputFile.newOutputStream()
    jvmArgs "-XX:MaxPermSize=512m"
    inputs.files(sourceSets.main.allSource, sourceSets.test.allSource)
    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
    outputs.file generatedFile
}

task cleanTmp << {
    project.ant.delete(dir: "tmp")
}

cleanTmp.description = 'Cleans tmp directory'
clean.dependsOn(cleanTmp)
