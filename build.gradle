import org.gradle.api.artifacts.maven.MavenDeployment

allprojects {
    apply {
        plugin 'java'
        plugin 'groovy'
        plugin 'eclipse'
        plugin 'idea'
    }

    repositories {
        mavenCentral()
    }
}

apply {
    plugin 'maven'
    plugin 'signing'
    plugin 'codenarc'
}

group = 'com.apphance.ameba'
ext.artifactId = 'Ameba'

task sourcesJar(type: Jar, dependsOn: classes, description: 'Prepares .jar file containing the source code of ameba') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc, description: 'Prepares .jar file with documentation generated out of the code') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

artifacts {
    if (isReleaseVersion) {
        archives sourcesJar
        archives javadocJar
        archives jar
    }
}

codenarc {
    configFile = file('codenarc.groovy')
}

signing {
    if (isReleaseVersion) {
        sign configurations.archives
    }
}

def uploadUsername = project.hasProperty('sonatypeUsername') ? project['sonatypeUsername'] : ''
def uploadPassword = project.hasProperty('sonatypePassword') ? project['sonatypePassword'] : ''

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment ->
                if (isReleaseVersion) {
                    signing.signPom(deployment)
                }
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: uploadUsername, password: uploadPassword)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: uploadUsername, password: uploadPassword)
            }

            pom.artifactId = artifactId

            pom.project {
                name 'ameba'
                packaging 'jar'
                description 'AMEBA stands for Apphance MobilE Build Automation - it is gradle plugin to automate builds for mobile applications'
                url 'http://ameba.apphance.com/'

                scm {
                    url 'scm:git@github.com:apphance/Apphance-MobilE-Build-Automation.git'
                    connection 'scm:git@github.com:apphance/Apphance-MobilE-Build-Automation.git'
                    developerConnection 'scm:git@github.com:apphance/Apphance-MobilE-Build-Automation.git'
                }

                licenses {
                    license {
                        name 'NewBSD Licence'
                        url 'http://www.opensource.org/licenses/bsd-license.php'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'jarek.potiuk.apphance'
                        name 'Jarek Potiuk'
                    }
                    developer {
                        id 'blazej.marcinkiewicz'
                        name 'Blazej Marcinkiewicz'
                    }
                    developer {
                        id 'wojtek.erbetowski'
                        name 'Wojtek Erbetowski'
                    }
                    developer {
                        id 'maciej.opala'
                        name 'Maciej Opala'
                    }
                }
            }

        }
    }
}

configure(install.repositories.mavenInstaller) {
    pom.project { artifactId artifactId }
}

configurations { mail }

dependencies {

    compile gradleApi()
    groovy localGroovy()

    compile('com.google.inject:guice:3.0') {
        exclude group: 'org.sonatype.sisu.inject'
    }

    compile('org.apache.httpcomponents:httpmime:4.2.2') {
        exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    }
    compile 'org.python:jython-standalone:2.7-b1'

    mail 'org.apache.ant:ant-javamail:1.8.2', 'javax.mail:mail:1.4', 'javax.activation:activation:1.1.1'

    compile 'javax.mail:mail:1.4'

    runtime 'org.apache.ant:ant-javamail:1.8.2', 'javax.mail:mail:1.4', 'javax.activation:activation:1.1.1'

    testCompile('org.spockframework:spock-core:0.6-groovy-1.8') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testRuntime 'cglib:cglib-nodep:2.2.2'
}

file('tmp').mkdirs()

task cleanTmp(type: Delete, description: 'Cleans tmp directory') {
    delete 'tmp'
}

gradle.addListener(new TestListener() {

    def l = Logging.getLogger(getClass())

    @Override
    void beforeSuite(TestDescriptor testDescriptor) {}

    @Override
    void afterSuite(TestDescriptor testDescriptor, TestResult testResult) {}

    @Override
    void beforeTest(TestDescriptor testDescriptor) {
        l.lifecycle("Test -> class: ${testDescriptor.className}, name: '${testDescriptor.name}'")
    }

    @Override
    void afterTest(TestDescriptor testDescriptor, TestResult testResult) {}
})

idea {
    module {
        inheritOutputDirs = false
        outputDir = file('build/classes/main')
        testOutputDir = file('build/classes/test')
    }
}