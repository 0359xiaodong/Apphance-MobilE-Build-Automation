import org.gradle.api.artifacts.maven.MavenDeployment

allprojects {
    apply {
        plugin 'java'
        plugin 'groovy'
        plugin 'eclipse'
        plugin 'idea'
    }

    repositories {
        mavenCentral()
    }
}

apply {
    plugin 'maven'
    plugin 'signing'
    plugin 'codenarc'
}

group = 'com.apphance.ameba'
ext.artifactId = 'Ameba'

task sourcesJar(type: Jar, dependsOn: classes, description: 'Prepares .jar file containing the source code of ameba') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc, description: 'Prepares .jar file with documentation generated out of the code') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

artifacts {
    if (isReleaseVersion) {
        archives sourcesJar
        archives javadocJar
        archives jar
    }
}

codenarc {
    configFile = file('codenarc.groovy')
}

signing {
    if (isReleaseVersion) {
        sign configurations.archives
    }
}

def uploadUsername = project.hasProperty('sonatypeUsername') ? project['sonatypeUsername'] : ''
def uploadPassword = project.hasProperty('sonatypePassword') ? project['sonatypePassword'] : ''

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment ->
                if (isReleaseVersion) {
                    signing.signPom(deployment)
                }
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: uploadUsername, password: uploadPassword)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: uploadUsername, password: uploadPassword)
            }

            pom.artifactId = artifactId

            pom.project {
                name 'ameba'
                packaging 'jar'
                description 'AMEBA stands for Apphance MobilE Build Automation - it is gradle plugin to automate builds for mobile applications'
                url 'http://ameba.apphance.com/'

                scm {
                    url 'scm:git@github.com:apphance/Apphance-MobilE-Build-Automation.git'
                    connection 'scm:git@github.com:apphance/Apphance-MobilE-Build-Automation.git'
                    developerConnection 'scm:git@github.com:apphance/Apphance-MobilE-Build-Automation.git'
                }

                licenses {
                    license {
                        name 'NewBSD Licence'
                        url 'http://www.opensource.org/licenses/bsd-license.php'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'jarek.potiuk.apphance'
                        name 'Jarek Potiuk'
                    }
                    developer {
                        id 'blazej.marcinkiewicz'
                        name 'Blazej Marcinkiewicz'
                    }
                    developer {
                        id 'wojtek.erbetowski'
                        name 'Wojtek Erbetowski'
                    }
                    developer {
                        id 'maciej.opala'
                        name 'Maciej Opala'
                    }
                }
            }

        }
    }
}

configure(install.repositories.mavenInstaller) {
    pom.project { artifactId artifactId }
}

configurations { mail }

dependencies {
    mail 'org.apache.ant:ant-javamail:1.8.2', 'javax.mail:mail:1.4', 'javax.activation:activation:1.1.1'

    groovy localGroovy()

    compile 'org.apache.httpcomponents:httpclient:4.1.3'
    compile 'org.apache.httpcomponents:httpmime:4.1.3'
    compile 'javax.mail:mail:1.4', gradleApi(), fileTree(dir: 'libs', include: '*.jar')
    compile 'org.python:jython-standalone:2.7-b1'
    compile 'com.google.inject:guice:3.0'

    runtime 'org.apache.ant:ant-javamail:1.8.2', 'javax.mail:mail:1.4', 'javax.activation:activation:1.1.1', fileTree(dir: 'libs', include: '*.jar')

    testCompile 'junit:junit:4.+', 'org.apache.ant:ant:1.8.2'
    testCompile "org.spockframework:spock-core:0.6-groovy-1.8"

    testRuntime 'junit:junit:4.+', 'org.apache.ant:ant:1.8.2', 'cglib:cglib-nodep:2.2.2'
}

file('tmp').mkdirs()

task cleanTmp << {
    project.ant.delete(dir: "tmp")
}

cleanTmp.description = 'Cleans tmp directory'
clean.dependsOn(cleanTmp)
